<!-- Footer Component -->
<section class="footer">
    <div class="footer-container">
        <div class="footer-brand">
            <div class="footer-logo">
                <img src="./client/img/mountain.png" alt="Hà Nội Vibes" width="36" height="36" />
                <strong>Hà Nội Vibes</strong>
            </div>
            <p class="footer-slogan">Hà Nội Vibes – Chạm nhịp Thủ đô</p>
            <p class="footer-copy">&#169; 2025 Hà Nội Vibes. Mọi quyền được bảo lưu.</p>
        </div>

        <div class="footer-contact">
            <h4>Liên hệ</h4>
            <p>Email: <a href="mailto:hanoivibes@gmail.com">hanoivibes@gmail.com</a></p>
            <p>Hotline: <a href="tel:19003690">1900 3690</a></p>
            <div class="social">
                <li>
                    <a href="/" title="Trang chủ"><i class="fa fa-home"></i></a>
                    <a href="#" title="Facebook"><i class="fa fa-facebook"></i></a>
                    <a href="#" title="YouTube"><i class="fa fa-youtube-play"></i></a>
                    <a href="#" title="TikTok"><i class="fa fa-music"></i></a>
                    <a href="mailto:hanoivibes@gmail.com" title="Email"><i class="fa fa-envelope"></i></a>
                </li>
            </div>
        </div>

        <div class="footer-dev">
            <h4>Đơn vị phát triển</h4>
            <p>Website được phát triển bởi nhóm sinh viên khoa Du lịch – Khách sạn, Trường Kinh tế Phenikaa, Đại học Phenikaa.</p>
        </div>
    </div>
</section>

<!-- Global Chatbot mount -->
<div id="hnv-chatbot-root"></div>

<!-- GTranslate Widget -->
<style>
    .gtranslate_wrapper {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 9999;
    }
    .gtranslate_wrapper select,
    .gtranslate_wrapper a {
        padding: 8px 12px;
        border-radius: 5px;
        background: white;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        border: 1px solid #ddd;
    }
    @media (max-width: 768px) {
        .gtranslate_wrapper { top: 10px; right: 10px; transform: scale(0.9); }
    }
    .notranslate { unicode-bidi: plaintext; }
    /* Mark brand as not translated if desired */
    .footer-logo, .logo { translate: none; }
</style>
<div class="gtranslate_wrapper"></div>
<script>
    window.gtranslateSettings = {
        default_language: "vi",
        wrapper_selector: ".gtranslate_wrapper",
        languages: [
            "vi",     // Vietnamese
            "en",     // English
            "zh-CN",  // Simplified Chinese
            "zh-TW",  // Traditional Chinese
            "ja",     // Japanese
            "ko",     // Korean
            "th",     // Thai
            "fr",     // French
            "de",     // German
            "es"      // Spanish
        ],
        native_language_names: true,
        detect_browser_language: false,
        flag_size: 24,
        float_switcher_open_direction: "bottom"
    };
    // Force Vietnamese as default language
    document.documentElement.setAttribute('lang', 'vi');
    
    // Clear any stored language preference to always start with Vietnamese
    try {
        localStorage.removeItem('googtrans');
        localStorage.removeItem('gtranslate_language');
        // Clear cookies
        document.cookie = 'googtrans=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';
        document.cookie = 'googtrans=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/; domain=' + location.hostname + ';';
    } catch(e) {}
    
    // Lazy load GTranslate for better performance
    window.addEventListener('DOMContentLoaded', function(){
        if(!document.querySelector('script[src*="gtranslate"]')){
            // Delay loading to improve initial page load
            setTimeout(() => {
                var s=document.createElement('script');
                s.src='https://cdn.gtranslate.net/widgets/latest/float.js';
                s.defer=true;
                s.async=true;
                document.body.appendChild(s);
                
                // After GTranslate loads, ensure Vietnamese is set
                s.onload = function() {
                    setTimeout(() => {
                        if (window.gtranslate) {
                            try {
                                // Force set to Vietnamese if not already
                                var currentLang = window.gtranslate.getCurrentLanguage ? 
                                    window.gtranslate.getCurrentLanguage() : 'vi';
                                if (currentLang !== 'vi') {
                                    window.gtranslate.switchLanguage('vi');
                                }
                            } catch(e) {
                                console.log('GTranslate force language:', e);
                            }
                        }
                    }, 500);
                };
            }, 1000);
        }
    });
    // Helper to refresh translation after dynamic content updates (optional usage)
    window.refreshTranslation = function(){
        if (window.gtranslate && typeof window.gtranslate.translate === 'function') {
            window.gtranslate.translate();
        }
    };
</script>
<!-- Global Reading Progress (client-only) -->
<link rel="stylesheet" href="/client/css/reading-progress.css" />
<script src="/client/js/reading-progress.js"></script>
<script>
    // Lightweight client-side overrides for specific phrases after GTranslate
    (function(){
        // Targeted English overrides (fast, no heavy DOM walk)
        // var EN_OVERRIDES = {
        //     nav: {
        //         pri: 'Home',
        //         sec: 'Attractions',
        //         tri: 'Stays',
        //         quad: 'Food & Drinks',
        //         quint: 'Transportation',
        //         hex: 'Entertainment'
        //     },
        //     texts: [
        //         { selector: 'header .header-content h2#quote', text: 'Discover Hanoi — Heritage and Vibrancy' },
        //         { selector: 'header .header-content h1', text: 'Hanoi Travel Guide' },
        //         { selector: 'header .header-content .ctn', text: 'Learn More' },
        //         { selector: '.tours .content-col h1', text: 'Overview of Hanoi' },
        //         { selector: '.explore .explore-content h1', text: 'Project Overview' },
        //         { selector: '.events .title h1', text: 'Featured Tours' },
        //         { selector: '.map-section .map-title-overlay h1', text: 'Hanoi Map' },
        //         { selector: '#about .title h1', text: 'Gallery' },
        //         { selector: '.title h1.font-color', text: 'Contributors' },
        //         { selector: '#contact .title h1', text: 'Contact' },
        //         { selector: '.cbox-message', text: 'Prefer Another Method?\nContact us using the details below' }
        //     ],
        //     links: [
        //         { selector: '.card .ctn', text: 'View Details' }
        //     ]
        // };

        function getCurrentLanguage(){
            try {
                if (window.gtranslate && typeof window.gtranslate.getCurrentLanguage === 'function') {
                    return window.gtranslate.getCurrentLanguage();
                }
            } catch(e) {}
            var htmlLang = document.documentElement.getAttribute('lang');
            if (htmlLang) return htmlLang;
            var first = (location.pathname.split('/')[1] || '').toLowerCase();
            return first || 'vi';
        }
        function applyCustomTranslations(){
            var lang = getCurrentLanguage();
            if (lang !== 'en') return; // only override in English, keep Vietnamese default as-is

            // Navigation by fixed ids
            try {
                var navMap = EN_OVERRIDES.nav || {};
                Object.keys(navMap).forEach(function(id){
                    var el = document.getElementById(id);
                    if (el && !el.closest('.notranslate')) el.textContent = navMap[id];
                });
            } catch(e) {}

            // Key headings and CTAs
            try {
                (EN_OVERRIDES.texts || []).forEach(function(item){
                    var el = document.querySelector(item.selector);
                    if (el && !el.closest('.notranslate')) el.textContent = item.text;
                });
            } catch(e) {}

            // Re-label repeated card CTAs if present
            try {
                (EN_OVERRIDES.links || []).forEach(function(item){
                    document.querySelectorAll(item.selector).forEach(function(el){
                        if (!el.closest('.notranslate')) el.textContent = item.text;
                    });
                });
            } catch(e) {}
        }

        // Debounced apply to avoid thrashing on large DOM updates
        var timer;
        function scheduleApply(){
            clearTimeout(timer);
            timer = setTimeout(applyCustomTranslations, 200);
        }

        // Run after initial load
        window.addEventListener('load', scheduleApply);

        // Re-run when GTranslate likely changed content (URL or DOM changes)
        window.addEventListener('popstate', scheduleApply);
        window.addEventListener('hashchange', scheduleApply);

        // Observe DOM changes to re-apply overrides post-translation
        var isApplying = false;
        var mo = new MutationObserver(function(){
            if (isApplying) return;
            scheduleApply();
        });
        mo.observe(document.body || document.documentElement, { childList: true, subtree: true });

        // Hook into our helper to re-apply after manual refreshTranslation calls
        var originalRefresh = window.refreshTranslation;
        window.refreshTranslation = function(){
            try { if (originalRefresh) originalRefresh(); } catch(e) {}
            scheduleApply();
        };
    })();
</script>